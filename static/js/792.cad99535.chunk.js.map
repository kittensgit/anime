{"version":3,"file":"static/js/792.cad99535.chunk.js","mappings":"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","sources":["webpack://anime/./src/componets/animeCards/animeCard/AnimeCard.module.css?f0d9","componets/animeCards/animeCard/AnimeCard.tsx","webpack://anime/./src/componets/animeCards/AnimeCards.module.css?a613","componets/animeCards/AnimeCards.tsx","webpack://anime/./src/componets/common/button/Button.module.css?1fef","componets/common/button/Button.tsx","hooks/useGetAnimeListFromFirebase.ts","pages/ToWatchPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"AnimeCard_card__MN31s\",\"front\":\"AnimeCard_front__BX9l2\",\"back\":\"AnimeCard_back__+XidZ\",\"img\":\"AnimeCard_img__36FKN\",\"title\":\"AnimeCard_title__NN5zZ\",\"caption\":\"AnimeCard_caption__DcLbc\",\"btn\":\"AnimeCard_btn__MSUHx\"};","import { FC } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport {\r\n    IAnime,\r\n    IAnimeTitle,\r\n    IAnimeGenre,\r\n    IAnimeImage,\r\n} from 'types/anime/index';\r\n\r\nimport Button from '../../common/button/Button';\r\n\r\nimport styles from './AnimeCard.module.css';\r\n\r\ninterface AnimeCardProps {\r\n    title: IAnimeTitle['title'];\r\n    year: IAnime['year'];\r\n    genre: IAnimeGenre['name'];\r\n    img: IAnimeImage['image_url'];\r\n    id: IAnime['mal_id'];\r\n}\r\n\r\nconst AnimeCard: FC<AnimeCardProps> = ({ genre, title, year, img, id }) => {\r\n    const location = useLocation();\r\n\r\n    return (\r\n        <div className={styles.card}>\r\n            <div className={styles.front}>\r\n                <img className={styles.img} src={img} alt={title} />\r\n                <h5 className={styles.title}>{title}</h5>\r\n                <p className={styles.caption}>\r\n                    {year ? year : '-'}, {genre}\r\n                </p>\r\n            </div>\r\n            <div className={styles.back}>\r\n                <h5 className={styles.title}>{title}</h5>\r\n                <p className={styles.caption}>\r\n                    {year ? year : '-'}, {genre}\r\n                </p>\r\n                <Button\r\n                    className={styles.btn}\r\n                    to={\r\n                        location.pathname.includes('/catalog')\r\n                            ? `${id}`\r\n                            : `/catalog/${id}`\r\n                    }\r\n                >\r\n                    Learn more\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnimeCard;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cards\":\"AnimeCards_cards__udoxo\",\"title\":\"AnimeCards_title__u5YmA\"};","import { FC } from 'react';\r\n\r\nimport { IAnime } from 'types/anime/index';\r\n\r\nimport AnimeCard from './animeCard/AnimeCard';\r\n\r\nimport styles from './AnimeCards.module.css';\r\n\r\ninterface AnimeCardsProps {\r\n    title?: string;\r\n    animelist: IAnime[];\r\n}\r\n\r\nconst AnimeCards: FC<AnimeCardsProps> = ({ title, animelist }) => {\r\n    return (\r\n        <div>\r\n            {title && <h5 className={styles.title}>{title}</h5>}\r\n            <div className={styles.cards}>\r\n                {animelist.map((anime) => (\r\n                    <AnimeCard\r\n                        key={anime.mal_id}\r\n                        genre={anime.genres ? anime.genres[0]?.name : ''}\r\n                        year={anime.year}\r\n                        title={anime.title}\r\n                        img={anime.images.jpg.image_url}\r\n                        id={anime.mal_id}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnimeCards;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__53Zcg\"};","import React, { FC } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport styles from './Button.module.css';\r\n\r\ninterface ButtonProps {\r\n    to: string;\r\n    children: React.ReactNode;\r\n    className?: string;\r\n}\r\n\r\nconst Button: FC<ButtonProps> = ({ to, children, className }) => {\r\n    return (\r\n        <Link to={to}>\r\n            <button className={styles.btn + ' ' + className}>{children}</button>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import { useEffect, useState } from 'react';\r\nimport { ref, get, getDatabase } from 'firebase/database';\r\n\r\nimport { useAuth } from 'hooks/useAuth';\r\nimport { IAnime } from 'types/anime';\r\n\r\nconst useGetAnimeFromFirebase = (listType: string) => {\r\n    const { id } = useAuth();\r\n    const db = getDatabase();\r\n    const [animeList, setAnimeList] = useState<IAnime[]>([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAnimeList = async () => {\r\n            try {\r\n                const listRef = ref(db, `users/${id}/${listType}/animelist`);\r\n                const listSnapshot = await get(listRef);\r\n\r\n                if (listSnapshot.exists()) {\r\n                    const listData = listSnapshot.val();\r\n                    const listArray: IAnime[] = Object.values(listData);\r\n                    setAnimeList(listArray);\r\n                } else {\r\n                    console.log(\r\n                        `Пользователь еще не просмотрел аниме в списке ${listType}`\r\n                    );\r\n                    setAnimeList([]);\r\n                }\r\n            } catch (error) {\r\n                console.error(\r\n                    `Ошибка при получении данных о списке ${listType} аниме:`,\r\n                    error\r\n                );\r\n                setAnimeList([]);\r\n            }\r\n        };\r\n\r\n        if (id) {\r\n            fetchAnimeList();\r\n        }\r\n    }, [id, listType, db]);\r\n\r\n    return animeList;\r\n};\r\n\r\nexport default useGetAnimeFromFirebase;\r\n","import { FC } from 'react';\r\n\r\nimport AnimeCards from 'componets/animeCards/AnimeCards';\r\n\r\nimport useGetAnimeFromFirebase from 'hooks/useGetAnimeListFromFirebase';\r\n\r\nconst ToWatchPage: FC = () => {\r\n    const toWatchAnimeList = useGetAnimeFromFirebase('towatch');\r\n\r\n    return (\r\n        <div>\r\n            <AnimeCards animelist={toWatchAnimeList} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToWatchPage;\r\n"],"names":["_ref","genre","title","year","img","id","location","useLocation","_jsxs","className","styles","children","_jsx","src","alt","Button","to","pathname","includes","concat","animelist","map","anime","_anime$genres$","AnimeCard","genres","name","images","jpg","image_url","mal_id","Link","listType","useAuth","db","getDatabase","animeList","setAnimeList","useState","useEffect","async","listRef","ref","listSnapshot","get","exists","listData","val","listArray","Object","values","console","log","error","fetchAnimeList","ToWatchPage","toWatchAnimeList","useGetAnimeFromFirebase","AnimeCards"],"sourceRoot":""}