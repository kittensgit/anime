{"version":3,"file":"static/js/593.29ce16e3.chunk.js","mappings":"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","sources":["webpack://anime/./src/componets/common/form/Form.module.css?e548","componets/common/form/Form.tsx","hooks/useAppDispatch.ts","webpack://anime/./src/componets/signup/SignUp.module.css?01ed","componets/signup/SignUp.tsx","pages/SignUpPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__H-TCY\",\"avatar_container\":\"Form_avatar_container__lzlur\",\"avatar_image\":\"Form_avatar_image__zvjC+\",\"plus\":\"Form_plus__v23Ay\",\"file_input\":\"Form_file_input__xKoIw\"};","import { FC, useRef, useState } from 'react';\r\n\r\nimport img from 'assets/ava.jpg';\r\n\r\nimport styles from './Form.module.css';\r\n\r\ninterface FormProps {\r\n    isSignUp?: boolean;\r\n    title: string;\r\n    handleClick: (\r\n        email: string,\r\n        password: string,\r\n        username: string,\r\n        photo: File | null\r\n    ) => void;\r\n}\r\n\r\nconst Form: FC<FormProps> = ({ title, isSignUp, handleClick }) => {\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [username, setUsername] = useState<string>('');\r\n    const [selectedPhoto, setSelectedPhoto] = useState<File | null>(null);\r\n\r\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\r\n    const imageRef = useRef<HTMLImageElement | null>(null);\r\n\r\n    const handleContainerClick = () => {\r\n        if (fileInputRef.current) {\r\n            fileInputRef.current.click();\r\n        }\r\n    };\r\n\r\n    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = event.target.files?.[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                if (imageRef.current) {\r\n                    imageRef.current.src = e.target?.result as string;\r\n                }\r\n            };\r\n            reader.readAsDataURL(file);\r\n            setSelectedPhoto(file);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={styles.form}>\r\n            {isSignUp && (\r\n                <>\r\n                    <div\r\n                        className={styles.avatar_container}\r\n                        onClick={handleContainerClick}\r\n                    >\r\n                        <input\r\n                            type=\"file\"\r\n                            accept=\"image/*\"\r\n                            className={styles.file_input}\r\n                            ref={fileInputRef}\r\n                            onChange={handleFileChange}\r\n                        />\r\n                        <img\r\n                            className={styles.avatar_image}\r\n                            src={img}\r\n                            alt=\"Avatar\"\r\n                            ref={imageRef}\r\n                        />\r\n                        <div className={styles.plus}>+</div>\r\n                    </div>\r\n                    <label>Username</label>\r\n                    <input\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                        placeholder=\"Enter username\"\r\n                        type=\"text\"\r\n                    />\r\n                </>\r\n            )}\r\n            <label>Email</label>\r\n            <input\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                placeholder=\"Enter email\"\r\n                type=\"email\"\r\n            />\r\n            <label>Password</label>\r\n            <input\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                placeholder=\"Enter password\"\r\n                type=\"password\"\r\n            />\r\n            <button\r\n                onClick={() =>\r\n                    handleClick(email, password, username, selectedPhoto)\r\n                }\r\n            >\r\n                {title}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","import { useDispatch } from 'react-redux';\r\n\r\nimport { AppDispatch } from 'types/redux/redux';\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"signup\":\"SignUp_signup__rFBJg\",\"link\":\"SignUp_link__x2niM\"};","import { FC } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Form from 'componets/common/form/Form';\r\n\r\nimport styles from './SignUp.module.css';\r\n\r\ninterface SignUpProps {\r\n    handleClick: (\r\n        email: string,\r\n        password: string,\r\n        username: string,\r\n        photo: File | null\r\n    ) => void;\r\n}\r\n\r\nconst SignUp: FC<SignUpProps> = ({ handleClick }) => {\r\n    return (\r\n        <div className={styles.signup}>\r\n            <h2>Sign Up</h2>\r\n\r\n            <Form isSignUp={true} title=\"Sign Up\" handleClick={handleClick} />\r\n            <Link className={styles.link} to={'/login'}>\r\n                Already have an account? <span>Log in</span>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n","import { FC, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n    createUserWithEmailAndPassword,\r\n    getAuth,\r\n    updateProfile,\r\n} from 'firebase/auth';\r\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\r\n\r\nimport SignUp from 'componets/signup/SignUp';\r\nimport Loading from 'componets/common/loading/Loading';\r\n\r\nimport { useAppDispatch } from 'hooks/useAppDispatch';\r\n\r\nimport { setUser } from '../redux/profileSlice';\r\n\r\nconst SignUpPage: FC = () => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useAppDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleSignUp = async (\r\n        email: string,\r\n        password: string,\r\n        username: string,\r\n        photo: File | null\r\n    ) => {\r\n        const auth = getAuth();\r\n        const storage = getStorage();\r\n\r\n        try {\r\n            setLoading(true);\r\n\r\n            const { user } = await createUserWithEmailAndPassword(\r\n                auth,\r\n                email,\r\n                password\r\n            );\r\n\r\n            let downloadURL = null;\r\n\r\n            if (photo) {\r\n                const storageReference = ref(\r\n                    storage,\r\n                    `user_photos/${user.uid}`\r\n                );\r\n                await uploadBytes(storageReference, photo);\r\n                downloadURL = await getDownloadURL(storageReference);\r\n            }\r\n\r\n            if (downloadURL !== null) {\r\n                await updateProfile(user, {\r\n                    displayName: username,\r\n                    photoURL: downloadURL,\r\n                });\r\n\r\n                dispatch(\r\n                    setUser({\r\n                        email: user.email,\r\n                        id: user.uid,\r\n                        token: user.refreshToken,\r\n                        username,\r\n                        photo: downloadURL,\r\n                    })\r\n                );\r\n\r\n                navigate('/profile');\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"container\">\r\n            {loading ? <Loading /> : <SignUp handleClick={handleSignUp} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignUpPage;\r\n"],"names":["_ref","title","isSignUp","handleClick","email","setEmail","useState","password","setPassword","username","setUsername","selectedPhoto","setSelectedPhoto","fileInputRef","useRef","imageRef","_jsxs","className","styles","children","_Fragment","onClick","handleContainerClick","current","click","_jsx","type","accept","ref","onChange","event","_event$target$files","file","target","files","reader","FileReader","onload","e","_e$target","src","result","readAsDataURL","img","alt","value","placeholder","useAppDispatch","useDispatch","Form","Link","to","SignUpPage","navigate","useNavigate","dispatch","loading","setLoading","Loading","SignUp","async","photo","auth","getAuth","storage","getStorage","user","createUserWithEmailAndPassword","downloadURL","storageReference","concat","uid","uploadBytes","getDownloadURL","updateProfile","displayName","photoURL","setUser","id","token","refreshToken","error","console"],"sourceRoot":""}